{
 "etype": "JSONDecodeError",
 "evalue": "JSONDecodeError('Expecting property name enclosed in double quotes: line 4 column 51 (char 123)')",
 "exception": {
  "args": [
   40,
   39,
   69,
   120,
   112,
   101,
   99,
   116,
   105,
   110,
   103,
   32,
   112,
   114,
   111,
   112,
   101,
   114,
   116,
   121,
   32,
   110,
   97,
   109,
   101,
   32,
   101,
   110,
   99,
   108,
   111,
   115,
   101,
   100,
   32,
   105,
   110,
   32,
   100,
   111,
   117,
   98,
   108,
   101,
   32,
   113,
   117,
   111,
   116,
   101,
   115,
   58,
   32,
   108,
   105,
   110,
   101,
   32,
   52,
   32,
   99,
   111,
   108,
   117,
   109,
   110,
   32,
   53,
   49,
   32,
   40,
   99,
   104,
   97,
   114,
   32,
   49,
   50,
   51,
   41,
   39,
   44,
   41
  ],
  "colno": [
   53,
   49
  ],
  "doc": [
   39,
   123,
   92,
   114,
   92,
   110,
   32,
   32,
   32,
   32,
   34,
   114,
   101,
   102,
   101,
   114,
   101,
   110,
   99,
   101,
   95,
   116,
   121,
   112,
   101,
   34,
   58,
   32,
   34,
   76,
   101,
   97,
   100,
   34,
   44,
   92,
   114,
   92,
   110,
   32,
   32,
   32,
   32,
   34,
   114,
   101,
   102,
   101,
   114,
   101,
   110,
   99,
   101,
   46,
   46,
   46,
   122,
   34,
   44,
   123,
   123,
   85,
   115,
   101,
   114,
   32,
   105,
   100,
   47,
   78,
   97,
   109,
   101,
   125,
   125,
   92,
   114,
   92,
   110,
   32,
   32,
   32,
   32,
   34,
   100,
   101,
   115,
   99,
   114,
   105,
   112,
   116,
   105,
   111,
   110,
   34,
   58,
   32,
   34,
   77,
   101,
   101,
   116,
   34,
   92,
   114,
   92,
   110,
   125,
   39
  ],
  "lineno": [
   52
  ],
  "msg": [
   39,
   69,
   120,
   112,
   101,
   99,
   116,
   105,
   110,
   103,
   32,
   112,
   114,
   111,
   112,
   101,
   114,
   116,
   121,
   32,
   110,
   97,
   109,
   101,
   32,
   101,
   110,
   99,
   108,
   111,
   115,
   101,
   100,
   32,
   105,
   110,
   32,
   100,
   111,
   117,
   98,
   108,
   101,
   32,
   113,
   117,
   111,
   116,
   101,
   115,
   39
  ],
  "pos": [
   49,
   50,
   51
  ],
  "with_traceback": [
   60,
   98,
   117,
   105,
   108,
   116,
   45,
   105,
   110,
   32,
   109,
   101,
   116,
   104,
   111,
   100,
   32,
   119,
   105,
   116,
   104,
   95,
   116,
   114,
   97,
   99,
   101,
   98,
   97,
   99,
   107,
   32,
   111,
   102,
   32,
   74,
   83,
   79,
   78,
   68,
   101,
   99,
   111,
   100,
   101,
   69,
   114,
   114,
   111,
   114,
   32,
   111,
   98,
   106,
   101,
   99,
   116,
   62
  ]
 },
 "frames": [
  {
   "call": "(request=<Request 'https://ssd.edofoxerp.com/api/resource/ToDo' [POST]>)",
   "dump": {
    "global init_request": "<function init_request>",
    "request": "<Request 'https://ssd.edofoxerp.com/api/resource/ToDo' [POST]>"
   },
   "file": "/home/gauritrans/frappe-bench/apps/frappe/frappe/app.py",
   "func": "application",
   "lines": {
    "53": "\t\trollback = True",
    "54": "",
    "55": "\t\tinit_request(request)",
    "56": "",
    "57": "\t\tfrappe.api.validate_auth()"
   },
   "lnum": 55
  },
  {
   "call": "(request=<Request 'https://ssd.edofoxerp.com/api/resource/ToDo' [POST]>)",
   "dump": {
    "global make_form_dict": "<function make_form_dict>",
    "request": "<Request 'https://ssd.edofoxerp.com/api/resource/ToDo' [POST]>"
   },
   "file": "/home/gauritrans/frappe-bench/apps/frappe/frappe/app.py",
   "func": "init_request",
   "lines": {
    "138": "\trequest.max_content_length = cint(frappe.local.conf.get(\"max_file_size\")) or 10 * 1024 * 1024",
    "139": "",
    "140": "\tmake_form_dict(request)",
    "141": "",
    "142": "\tif request.method != \"OPTIONS\":"
   },
   "lnum": 140
  },
  {
   "call": "(request=<Request 'https://ssd.edofoxerp.com/api/resource/ToDo' [POST]>)",
   "dump": {
    "args": "undefined",
    "json": "<module 'json' from '/usr/lib/python3.10/json/__init__.py'>",
    "json. loads": "<function loads>",
    "request_data": "'{\\r\\n    \"reference_type\": \"Lead\",\\r\\n    \"reference...z\",{{User id/Name}}\\r\\n    \"description\": \"Meet\"\\r\\n}'"
   },
   "file": "/home/gauritrans/frappe-bench/apps/frappe/frappe/app.py",
   "func": "make_form_dict",
   "lines": {
    "239": "\trequest_data = request.get_data(as_text=True)",
    "240": "\tif \"application/json\" in (request.content_type or \"\") and request_data:",
    "241": "\t\targs = json.loads(request_data)",
    "242": "\telse:",
    "243": "\t\targs = {}"
   },
   "lnum": 241
  },
  {
   "call": "(s='{\\r\\n    \"reference_type\": \"Lead\",\\r\\n    \"reference...z\",{{User id/Name}}\\r\\n    \"description\": \"Meet\"\\r\\n}', cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw={})",
   "dump": {
    "_default_decoder. decode": "<bound method JSONDecoder.decode of <json.decoder.JSONDecoder object>>",
    "global _default_decoder": "<json.decoder.JSONDecoder object>",
    "s": "'{\\r\\n    \"reference_type\": \"Lead\",\\r\\n    \"reference...z\",{{User id/Name}}\\r\\n    \"description\": \"Meet\"\\r\\n}'"
   },
   "file": "/usr/lib/python3.10/json/__init__.py",
   "func": "loads",
   "lines": {
    "344": "            parse_int is None and parse_float is None and",
    "345": "            parse_constant is None and object_pairs_hook is None and not kw):",
    "346": "        return _default_decoder.decode(s)",
    "347": "    if cls is None:",
    "348": "        cls = JSONDecoder"
   },
   "lnum": 346
  },
  {
   "call": "(self=<json.decoder.JSONDecoder object>, s='{\\r\\n    \"reference_type\": \"Lead\",\\r\\n    \"reference...z\",{{User id/Name}}\\r\\n    \"description\": \"Meet\"\\r\\n}', _w=<built-in method match of re.Pattern object>)",
   "dump": {
    ").end": "undefined",
    "_w": "<built-in method match of re.Pattern object>",
    "end": "undefined",
    "idx": "undefined",
    "obj": "undefined",
    "s": "'{\\r\\n    \"reference_type\": \"Lead\",\\r\\n    \"reference...z\",{{User id/Name}}\\r\\n    \"description\": \"Meet\"\\r\\n}'",
    "self": "<json.decoder.JSONDecoder object>",
    "self. raw_decode": "<bound method JSONDecoder.raw_decode of <json.decoder.JSONDecoder object>>"
   },
   "file": "/usr/lib/python3.10/json/decoder.py",
   "func": "decode",
   "lines": {
    "335": "",
    "336": "        \"\"\"",
    "337": "        obj, end = self.raw_decode(s, idx=_w(s, 0).end())",
    "338": "        end = _w(s, end).end()",
    "339": "        if end != len(s):"
   },
   "lnum": 337
  },
  {
   "call": "(self=<json.decoder.JSONDecoder object>, s='{\\r\\n    \"reference_type\": \"Lead\",\\r\\n    \"reference...z\",{{User id/Name}}\\r\\n    \"description\": \"Meet\"\\r\\n}', idx=0)",
   "dump": {
    "end": "undefined",
    "idx": "0",
    "obj": "undefined",
    "s": "'{\\r\\n    \"reference_type\": \"Lead\",\\r\\n    \"reference...z\",{{User id/Name}}\\r\\n    \"description\": \"Meet\"\\r\\n}'",
    "self": "<json.decoder.JSONDecoder object>",
    "self. scan_once": "<_json.Scanner object>"
   },
   "file": "/usr/lib/python3.10/json/decoder.py",
   "func": "raw_decode",
   "lines": {
    "351": "        \"\"\"",
    "352": "        try:",
    "353": "            obj, end = self.scan_once(s, idx)",
    "354": "        except StopIteration as err:",
    "355": "            raise JSONDecodeError(\"Expecting value\", s, err.value) from None"
   },
   "lnum": 353
  }
 ],
 "locals": {
  "idx": "0",
  "s": "{\r\n    \"reference_type\": \"Lead\",\r\n    \"reference_name\": \"LEAD-12-1747\",\r\n    \"assigned_by\": \"ishwar.pandit@mattersoft.xyz\",{{User id/Name}}\r\n    \"description\": \"Meet\"\r\n}",
  "self": "<json.decoder.JSONDecoder object>"
 },
 "pyver": "Python 3.10.12: /home/gauritrans/frappe-bench/env/bin/python (prefix: /home/gauritrans/frappe-bench/env)",
 "timestamp": "2024-06-18 14:40:00.291908",
 "traceback": "Traceback (most recent call last):\n  File \"/home/gauritrans/frappe-bench/apps/frappe/frappe/app.py\", line 55, in application\n    init_request(request)\n  File \"/home/gauritrans/frappe-bench/apps/frappe/frappe/app.py\", line 140, in init_request\n    make_form_dict(request)\n  File \"/home/gauritrans/frappe-bench/apps/frappe/frappe/app.py\", line 241, in make_form_dict\n    args = json.loads(request_data)\n  File \"/usr/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/usr/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/usr/lib/python3.10/json/decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\njson.decoder.JSONDecodeError: Expecting property name enclosed in double quotes: line 4 column 51 (char 123)\n"
}